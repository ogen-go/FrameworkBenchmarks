// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// Caching implements Caching operation.
	//
	// Test #7. The Caching test exercises the preferred in-memory or separate-process caching technology
	// for the platform or framework. For implementation simplicity, the requirements are very similar to
	// the multiple database-query test Test #3, but use a separate database table. The requirements are
	// quite generous, affording each framework fairly broad freedom to meet the requirements in the
	// manner that best represents the canonical non-distributed caching approach for the framework.
	// (Note: a distributed caching test type could be added later.).
	//
	// GET /cached-worlds
	Caching(ctx context.Context, params CachingParams) (WorldObjects, error)
	// DB implements DB operation.
	//
	// Test #2. The Single Database Query test exercises the framework's object-relational mapper (ORM),
	// random number generator, database driver, and database connection pool.
	//
	// GET /db
	DB(ctx context.Context) (*WorldObject, error)
	// JSON implements json operation.
	//
	// Test #1. The JSON Serialization test exercises the framework fundamentals including keep-alive
	// support, request routing, request header parsing, object instantiation, JSON serialization,
	// response header generation, and request count throughput.
	//
	// GET /json
	JSON(ctx context.Context) (*HelloWorld, error)
	// Queries implements Queries operation.
	//
	// Test #3. The Multiple Database Queries test is a variation of Test #2 and also uses the World
	// table. Multiple rows are fetched to more dramatically punish the database driver and connection
	// pool. At the highest queries-per-request tested (20), this test demonstrates all frameworks'
	// convergence toward zero requests-per-second as database activity increases.
	//
	// GET /queries
	Queries(ctx context.Context, params QueriesParams) (WorldObjects, error)
	// Updates implements Updates operation.
	//
	// Test #5. The Database Updates test is a variation of Test #3 that exercises the ORM's persistence
	// of objects and the database driver's performance at running UPDATE statements or similar. The
	// spirit of this test is to exercise a variable number of read-then-write style database operations.
	//
	// GET /updates
	Updates(ctx context.Context, params UpdatesParams) (WorldObjects, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
