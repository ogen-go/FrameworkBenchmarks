// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// Caching implements Caching operation.
//
// Test #7. The Caching test exercises the preferred in-memory or separate-process caching technology
// for the platform or framework. For implementation simplicity, the requirements are very similar to
// the multiple database-query test Test #3, but use a separate database table. The requirements are
// quite generous, affording each framework fairly broad freedom to meet the requirements in the
// manner that best represents the canonical non-distributed caching approach for the framework.
// (Note: a distributed caching test type could be added later.).
//
// GET /cached-worlds
func (UnimplementedHandler) Caching(ctx context.Context, params CachingParams) (r WorldObjects, _ error) {
	return r, ht.ErrNotImplemented
}

// DB implements DB operation.
//
// Test #2. The Single Database Query test exercises the framework's object-relational mapper (ORM),
// random number generator, database driver, and database connection pool.
//
// GET /db
func (UnimplementedHandler) DB(ctx context.Context) (r *WorldObject, _ error) {
	return r, ht.ErrNotImplemented
}

// JSON implements json operation.
//
// Test #1. The JSON Serialization test exercises the framework fundamentals including keep-alive
// support, request routing, request header parsing, object instantiation, JSON serialization,
// response header generation, and request count throughput.
//
// GET /json
func (UnimplementedHandler) JSON(ctx context.Context) (r *HelloWorld, _ error) {
	return r, ht.ErrNotImplemented
}

// Queries implements Queries operation.
//
// Test #3. The Multiple Database Queries test is a variation of Test #2 and also uses the World
// table. Multiple rows are fetched to more dramatically punish the database driver and connection
// pool. At the highest queries-per-request tested (20), this test demonstrates all frameworks'
// convergence toward zero requests-per-second as database activity increases.
//
// GET /queries
func (UnimplementedHandler) Queries(ctx context.Context, params QueriesParams) (r WorldObjects, _ error) {
	return r, ht.ErrNotImplemented
}

// Updates implements Updates operation.
//
// Test #5. The Database Updates test is a variation of Test #3 that exercises the ORM's persistence
// of objects and the database driver's performance at running UPDATE statements or similar. The
// spirit of this test is to exercise a variable number of read-then-write style database operations.
//
// GET /updates
func (UnimplementedHandler) Updates(ctx context.Context, params UpdatesParams) (r WorldObjects, _ error) {
	return r, ht.ErrNotImplemented
}
